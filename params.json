{
  "name": "Redwood",
  "tagline": "Dealing with trees in Python",
  "body": "# Redwood\r\n\r\nDealing with tree data types in Python. Functions include reading trees from files, creating trees, adding trees, merging trees, and writing trees.\r\n\r\n###License\r\nMIT\r\n\r\n#To use\r\nClone/download the repository.\r\n\r\n##Making a Simple Tree\r\n```python\r\nfrom Redwood import Tree\r\n\r\ntree1 = Tree('this is the root node')\r\ntree1.add_child('left node')\r\ntree1.add_child('right node')\r\n```\r\n\r\n##Appending Trees\r\n```python\r\nfrom Redwood import Tree\r\nfrom Redwood import append_trees\r\n\r\nA = Tree('A')\r\nA.add_child('B')\r\nA.add_child('C')\r\n\r\nX = Tree('X')\r\nX.add_child('Y')\r\n\r\nnewTree = append_trees(A,X)\r\n\r\nThe result:\r\n    A\r\n  /   \\\r\nB       C\r\n           \\\r\n            X\r\n              \\\r\n                Y\r\n```\r\n##Merging Trees\r\nThis function merges trees at the highest shared node\r\n```python\r\nfrom Redwood import Tree\r\nfrom Redwood import merge_trees\r\n\r\ntree1 = Tree('A')\r\nB = A.add_child('B')\r\nC = A.add_child('C')\r\nD = C.add_child('D')\r\n\r\ntree2 = Tree('C')\r\nE = tree2.add_child('E')\r\nF = E.add_child('F')\r\nG = E.add_child('G')\r\n\r\nnewTree = merge_trees(A,X)\r\n\r\nThe result:\r\n    A\r\n  /   \\\r\nB       C\r\n      /   \\\r\n     D      E\r\n           /  \\\r\n          G     F\r\n\r\n```\r\nNote: Redwood is not binary. Nodes can have multiple branches.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}